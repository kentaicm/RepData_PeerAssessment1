activitiesmonitordata$interval <- as.factor(activitiesmonitordata$interval)
# Extract the levels of 5-min intervals
l <- levels(activitiesmonitordata$interval)
#Subsetting the data to clear the "not available data"
NA.number <- is.na(as.character(activitiesmonitordata$steps))
clean.data<- activitiesmonitordata[!NA.number,]
#Calculate the total number of steps taken per day
totalsteps <- aggregate(steps ~ date, data=clean.data,sum)
#Adding the column names to the created data frame
colnames(totalsteps) <- c("date", "steps")
##Histogram of the total number of steps taken each day
hist(as.numeric(totalsteps$steps), breaks = 20, col = "green", xlab = "Number of Steps", main = "Histogram of the total number of steps taken each day")
##Mean and median number of steps taken each day
avgsteps <- mean(totalsteps$steps)
avgsteps
mediansteps <- median(totalsteps$steps)
mediansteps
##What is the average number of steps taken, averaged across all days?
steps.per.int <- aggregate(clean.data$steps, by=list(interval=clean.data$interval), FUN=mean)
#Add column names
colnames(steps.per.int) <- c("interval", "averagesteps")
##Time series plot of the average number of steps taken
plot(levels(steps.per.int$interval),steps.per.int$averagesteps,type="l",xlab="Interval",ylab="Average Number of Steps", main="Average Daily Activity Pattern", col="red",lwd=2)
#Maximum steps per 5mins Interval
max.steps <- max(steps.per.int$averagesteps)
max.steps
##The 5-minute interval that, on average, contains the maximum number of steps
int.max.steps <- steps.per.int[which.max(steps.per.int$averagesteps),]$interval
int.max.steps
#Find the total number of missing "steps" in the original dataset
missing.steps <- sum(is.na(as.character(activitiesmonitordata$steps)))
#Find the total number of missing "date" in the original dataset
missing.dates <- sum(is.na(as.character(activitiesmonitordata$date)))
#Find the total number of missing "interval" in the original dataset
missing.interval <- sum(is.na(as.character(activitiesmonitordata$interval)))
#Total missing data
missing.data <- missing.steps+missing.dates+missing.interval
##Code to describe and show a strategy for imputing missing data
#The best way to deal with missing data is to fill up the emply data with the avergage of the respective column as it should not cause a big change in the quantitative number.
# Since the missing data is only limited to the "steps", we will fill up the average steps in the missing value.
modified.data <- activitiesmonitordata
modified.data[NA.number, ]$steps<-unlist(lapply(NA.number, FUN=function(NA.number){
steps.per.int[activitiesmonitordata[NA.number,]$interval==steps.per.int$interval,]$averagesteps
}))
#Establish a new steps.each.day data with the modified dataset
steps.each.day.modified <- aggregate(steps ~ date, data = modified.data, sum)
#Insert the column names to the modified dataset
colnames(steps.each.day.modified) <- c("date", "steps")
##Histogram of the total number of steps taken each day after missing values are imputed
hist(steps.each.day.modified$steps, breaks=20, col = "blue", xlab = "Number of Steps", main="Histogram of the total number of steps taken each day")
#Calculating the mean of the total number of steps taken per day for the modified data
mean(steps.each.day.modified$steps)
#Calculating the median of the total number of steps taken per day for the modified data
median(steps.each.day.modified$steps)
##Panel plot comparing the average number of steps taken per 5-minute interval across weekdays and weekends
#Create a new column in the modified data date as a factor so that we can classify it as weekdays or weekends.
modified.data$day <- as.factor(weekdays(modified.data$date))
#Create a logic that indicate it is a weekday.
modified.data$is.weekday <- ifelse(!(modified.data$day %in% c("Saturday","Sunday")), TRUE, FALSE)
#Subsetting the weekdays
weekdays.data <- modified.data[modified.data$is.weekday,]
#Calculating the average number of steps for weekdays
steps.per.int.weekdays <- aggregate(weekdays.data$steps, by=list(interval=weekdays.data$interval), FUN=mean)
#Subsetting the weekends
weekends.data <- modified.data[!modified.data$is.weekday,]
#Calculating the average number of steps for weekends
steps.per.int.weekends <- aggregate(weekends.data$steps, by=list(interval=weekends.data$interval), FUN=mean)
#Adding columns names to both new sets of database
colnames(steps.per.int.weekdays) <- c("interval", "averagesteps")
colnames(steps.per.int.weekends) <- c("interval", "averagesteps")
#Adding a column to indecate the day
steps.per.int.weekdays$day <- "Weekday"
steps.per.int.weekends$day <- "Weekend"
#Merge the 2 datasets together using rbind
weekdata <- rbind(steps.per.int.weekends,steps.per.int.weekdays)
#Turning the day column into a factor
weekdata$day <- as.factor(weekdata$day)
#Add lattice Library
library(lattice)
#Plot chart to compare weekday and weekend
xyplot(averagesteps ~  interval | day, data = weekdata, layout = c(1,2), type ="l", ylab="Number of Steps")
##All of the R code needed to reproduce the results (numbers, plots, etc.) in the report
#Calculate the average number of steps taken per day
View(weekdata)
View(modified.data)
rm(list = ls())
data <- read.csv(unz("activity.zip", "activity.csv"), header = TRUE, sep = ",", na.strings = "NA")
summary(data)
str(data)
head(data)
data$date <- as.Date(data$date, format = "%Y-%m-%d")
data$interval <- factor(data$interval)
data$date <- as.Date(data$date, format = "%Y-%m-%d")
data$interval <- factor(data$interval)
NA_index <- is.na(as.character(data$steps))
data_no_NA <- data[!NA_index,]
head(data_no_NA)
steps_each_day <- aggregate(steps ~ date, data = data_no_NA, sum)
#Adding column names to the created data frame
colnames(steps_each_day) <- c("date", "steps")
steps_each_day <- aggregate(steps ~ date, data = data_no_NA, sum)
#Adding column names to the created data frame
colnames(steps_each_day) <- c("date", "steps")
#Making a histogram of the total number of steps taken each day.
hist(as.numeric(steps_each_day$steps), breaks = 20, col = "red", xlab = "Number of Steps", main= "Histogram of the total number of steps taken each day")
hist(as.numeric(steps_each_day$steps), breaks = 20, col = "Blue", xlab = "Number of Steps", main= "Histogram of the total number of steps taken each day")
mean(steps_each_day$steps)
median(steps_each_day$steps)
steps_per_interval <- aggregate(data_no_NA$steps, by=list(interval=data_no_NA$interval), FUN=mean)
#Adding columns names
colnames(steps_per_interval) <- c("interval", "average_steps")
#ploting the average daily activity pattern
plot(as.integer(levels(steps_per_interval$interval)), steps_per_interval$average_steps, type="l",
xlab = "Interval", ylab = "Average Number of Steps", main = "Average Daily Activity Pattern",  col ="blue")
plot(as.integer(levels(steps_per_interval$interval)), steps_per_interval$average_steps, type="l",xlab = "Interval", ylab = "Average Number of Steps", main = "Average Daily Activity Pattern",  col ="blue")
max_steps <- max(steps_per_interval$average_steps)
max_steps
intervale_max_steps<-steps_per_interval[which.max(steps_per_interval$average_steps),]$interval
intervale_max_steps
sum(is.na(as.character(data$steps)))
sum(is.na(as.character(data$interval)))
NA_index <- which(is.na(as.character(data$steps)))
complete_data <- data
#Imputing missing values using the mean for that 5-minute interval
complete_data[NA_index, ]$steps<-unlist(lapply(NA_index, FUN=function(NA_index){
steps_per_interval[data[NA_index,]$interval==steps_per_interval$interval,]$average_steps
}))
summary(complete_data)
str(complete_data)
#Creating a data frame with the steps taken for each day
steps_each_day_complete <- aggregate(steps ~ date, data = complete_data, sum)
#Adding column names to the created data frame
colnames(steps_each_day_complete) <- c("date", "steps")
#Making the histogram
hist(as.numeric(steps_each_day_complete$steps), breaks = 20, col = "red", xlab = "Number of Steps", main= "Histogram of the total number of steps taken each day")
mean(steps_each_day_complete$steps)
median(steps_each_day_complete$steps)
complete_data$day <- as.factor(weekdays(complete_data$date))
#Creating a logical variable "is_weekday" (weekday=TRUE, weekend = FALE) :
complete_data$is_weekday <- ifelse(!(complete_data$day %in% c("Saturday","Sunday")), TRUE, FALSE)
#Calculating the average number of steps for weekdays
weekdays_data <- complete_data[complete_data$is_weekday,]
steps_per_interval_weekdays <- aggregate(weekdays_data$steps, by=list(interval=weekdays_data$interval), FUN=mean)
#Calculating the average number of steps for weekends
weekends_data <- complete_data[!complete_data$is_weekday,]
steps_per_interval_weekends <- aggregate(weekends_data$steps, by=list(interval=weekends_data$interval), FUN=mean)
#Adding columns names
colnames(steps_per_interval_weekdays) <- c("interval", "average_steps")
colnames(steps_per_interval_weekends) <- c("interval", "average_steps")
#Adding a column to indecate the day
steps_per_interval_weekdays$day <- "Weekday"
steps_per_interval_weekends$day <- "Weekend"
#Merging the two togather
week_data <- rbind(steps_per_interval_weekends, steps_per_interval_weekdays)
#Converting the day variabke to a factor
week_data$day <- as.factor(week_data$day)
#Making the plot
library(lattice)
xyplot(average_steps ~  interval | day, data = week_data, layout = c(1,2), type ="l", ylab="Number of Steps")
rm(list=ls())
##Code for reading in the dataset and/or processing the data
#Set up working directory
setwd("D:/Downloads/Coursera/Reproducible Research/Course Project 1")
#URL to download the data zip file
fileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
#Download the zip file into workspace
download.file(fileUrl, destfile="activity.zip")
#Unzip the file, read the file using read.csv() to load the data into R
data <- read.csv(unz("activity.zip", "activity.csv"), header = TRUE, sep = ",", na.strings = "NA")
#Look at the summary of the data
summary(data)
#Look at the struture of the data
str(data)
#Looking at the first 6 rows of the dataset:
head(data)
#CConverting the “date” variable to a Date classe and the “interval” variable to a factor
data$date <- as.Date(data$date, format = "%Y-%m-%d")
data$interval <- factor(data$interval)
##What is mean total number of steps taken per day?
#Subsetting the dataset to ignore missing values
NA_index <- is.na(as.character(data$steps))
data_no_NA <- data[!NA_index,]
head(data_no_NA)
#Aggregating the number of steps taken each day
#Creating a data frame with the steps taken for each day
steps_each_day <- aggregate(steps ~ date, data = data_no_NA, sum)
#Adding column names to the created data frame
colnames(steps_each_day) <- c("date", "steps")
#Making a histogram of the total number of steps taken each day.
hist(as.numeric(steps_each_day$steps), breaks = 20, col = "Blue", xlab = "Number of Steps", main= "Histogram of the total number of steps taken each day")
#Calculating the mean and median total number of steps taken per day.
mean(steps_each_day$steps)
median(steps_each_day$steps)
##What is the average daily activity pattern?
#Calculating the average number of steps taken, averaged across all days.
#Calculating the average
steps_per_interval <- aggregate(data_no_NA$steps, by=list(interval=data_no_NA$interval), FUN=mean)
#Adding columns names
colnames(steps_per_interval) <- c("interval", "average_steps")
#ploting the average daily activity pattern
plot(as.integer(levels(steps_per_interval$interval)), steps_per_interval$average_steps, type="l",xlab = "Interval", ylab = "Average Number of Steps", main = "Average Daily Activity Pattern",  col ="blue")
#The maximum number of average steps
max_steps <- max(steps_per_interval$average_steps)
max_steps
#The 5-minute interval that contains the maximum number of steps
intervale_max_steps<-steps_per_interval[which.max(steps_per_interval$average_steps),]$interval
intervale_max_steps
#The total number of missing values in the dataset (for each variable):
#For the “steps” variable:
sum(is.na(as.character(data$steps)))
#For the “date” variable:
sum(is.na(as.character(data$date)))
#For the “interval” variable:
sum(is.na(as.character(data$interval)))
#The strategy for filling in all of the missing values in the dataset. Missing values are replaced by the mean of that 5-minute interval.
#finding the indices of missing values (NAs)
NA_index <- which(is.na(as.character(data$steps)))
complete_data <- data
#Imputing missing values using the mean for that 5-minute interval
complete_data[NA_index, ]$steps<-unlist(lapply(NA_index, FUN=function(NA_index){
steps_per_interval[data[NA_index,]$interval==steps_per_interval$interval,]$average_steps
}))
#Checking the complete data with the summary and str methods
summary(complete_data)
str(complete_data)
#Making a histogram of the total number of steps taken each day for the complete dataset.
#Creating a data frame with the steps taken for each day
steps_each_day_complete <- aggregate(steps ~ date, data = complete_data, sum)
#Adding column names to the created data frame
colnames(steps_each_day_complete) <- c("date", "steps")
#Making the histogram
hist(as.numeric(steps_each_day_complete$steps), breaks = 20, col = "red", xlab = "Number of Steps", main= "Histogram of the total number of steps taken each day")
#Calculating the mean and median total number of steps taken per day for the complete dataset.
mean(steps_each_day_complete$steps)
median(steps_each_day_complete$steps)
#Are there differences in activity patterns between weekdays and weekends?
#Creating a factor variable "day "to store the day of the week:
complete_data$day <- as.factor(weekdays(complete_data$date))
#Creating a logical variable "is_weekday" (weekday=TRUE, weekend = FALE) :
complete_data$is_weekday <- ifelse(!(complete_data$day %in% c("Saturday","Sunday")), TRUE, FALSE)
#Calculating the average number of steps for weekdays
weekdays_data <- complete_data[complete_data$is_weekday,]
steps_per_interval_weekdays <- aggregate(weekdays_data$steps, by=list(interval=weekdays_data$interval), FUN=mean)
#Calculating the average number of steps for weekends
weekends_data <- complete_data[!complete_data$is_weekday,]
steps_per_interval_weekends <- aggregate(weekends_data$steps, by=list(interval=weekends_data$interval), FUN=mean)
#Adding columns names
colnames(steps_per_interval_weekdays) <- c("interval", "average_steps")
colnames(steps_per_interval_weekends) <- c("interval", "average_steps")
#Adding a column to indecate the day
steps_per_interval_weekdays$day <- "Weekday"
steps_per_interval_weekends$day <- "Weekend"
#Merging the two togather
week_data <- rbind(steps_per_interval_weekends, steps_per_interval_weekdays)
#Converting the day variabke to a factor
week_data$day <- as.factor(week_data$day)
#Making the plot
library(lattice)
xyplot(average_steps ~  interval | day, data = week_data, layout = c(1,2), type ="l", ylab="Number of Steps")
##Code for reading in the dataset and/or processing the data
#Set up working directory
setwd("D:/Downloads/Coursera/Reproducible Research/Course Project 1")
#URL to download the data zip file
fileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
#Download the zip file into workspace
download.file(fileUrl, destfile="activity.zip")
#Unzip the file, read the file using read.csv() to load the data into R
data <- read.csv(unz("activity.zip", "activity.csv"), header = TRUE, sep = ",", na.strings = "NA")
#Look at the summary of the data
summary(data)
#Look at the struture of the data
str(data)
#Looking at the first 6 rows of the dataset:
head(data)
#CConverting the “date” variable to a Date classe and the “interval” variable to a factor
data$date <- as.Date(data$date, format = "%Y-%m-%d")
data$interval <- factor(data$interval)
##What is mean total number of steps taken per day?
#Subsetting the dataset to ignore missing values
NA_index <- is.na(as.character(data$steps))
data_no_NA <- data[!NA_index,]
head(data_no_NA)
#Aggregating the number of steps taken each day
#Creating a data frame with the steps taken for each day
steps_each_day <- aggregate(steps ~ date, data = data_no_NA, sum)
#Adding column names to the created data frame
colnames(steps_each_day) <- c("date", "steps")
#Making a histogram of the total number of steps taken each day.
hist(as.numeric(steps_each_day$steps), breaks = 20, col = "Blue", xlab = "Number of Steps", main= "Histogram of the total number of steps taken each day")
#Calculating the mean and median total number of steps taken per day.
mean(steps_each_day$steps)
median(steps_each_day$steps)
##What is the average daily activity pattern?
#Calculating the average number of steps taken, averaged across all days.
#Calculating the average
steps_per_interval <- aggregate(data_no_NA$steps, by=list(interval=data_no_NA$interval), FUN=mean)
#Adding columns names
colnames(steps_per_interval) <- c("interval", "average_steps")
#ploting the average daily activity pattern
plot(as.integer(levels(steps_per_interval$interval)), steps_per_interval$average_steps, type="l",xlab = "Interval", ylab = "Average Number of Steps", main = "Average Daily Activity Pattern",  col ="blue")
#The maximum number of average steps
max_steps <- max(steps_per_interval$average_steps)
max_steps
#The 5-minute interval that contains the maximum number of steps
intervale_max_steps<-steps_per_interval[which.max(steps_per_interval$average_steps),]$interval
intervale_max_steps
#The total number of missing values in the dataset (for each variable):
#For the “steps” variable:
sum(is.na(as.character(data$steps)))
#For the “date” variable:
sum(is.na(as.character(data$date)))
#For the “interval” variable:
sum(is.na(as.character(data$interval)))
#The strategy for filling in all of the missing values in the dataset. Missing values are replaced by the mean of that 5-minute interval.
#finding the indices of missing values (NAs)
NA_index <- which(is.na(as.character(data$steps)))
complete_data <- data
#Imputing missing values using the mean for that 5-minute interval
complete_data[NA_index, ]$steps<-unlist(lapply(NA_index, FUN=function(NA_index){
steps_per_interval[data[NA_index,]$interval==steps_per_interval$interval,]$average_steps
}))
#Checking the complete data with the summary and str methods
summary(complete_data)
str(complete_data)
#Making a histogram of the total number of steps taken each day for the complete dataset.
#Creating a data frame with the steps taken for each day
steps_each_day_complete <- aggregate(steps ~ date, data = complete_data, sum)
#Adding column names to the created data frame
colnames(steps_each_day_complete) <- c("date", "steps")
#Making the histogram
hist(as.numeric(steps_each_day_complete$steps), breaks = 20, col = "red", xlab = "Number of Steps", main= "Histogram of the total number of steps taken each day")
#Calculating the mean and median total number of steps taken per day for the complete dataset.
mean(steps_each_day_complete$steps)
median(steps_each_day_complete$steps)
#Are there differences in activity patterns between weekdays and weekends?
#Creating a factor variable "day "to store the day of the week:
complete_data$day <- as.factor(weekdays(complete_data$date))
#Creating a logical variable "is_weekday" (weekday=TRUE, weekend = FALE) :
complete_data$is_weekday <- ifelse(!(complete_data$day %in% c("Saturday","Sunday")), TRUE, FALSE)
#Calculating the average number of steps for weekdays
weekdays_data <- complete_data[complete_data$is_weekday,]
steps_per_interval_weekdays <- aggregate(weekdays_data$steps, by=list(interval=weekdays_data$interval), FUN=mean)
#Calculating the average number of steps for weekends
weekends_data <- complete_data[!complete_data$is_weekday,]
steps_per_interval_weekends <- aggregate(weekends_data$steps, by=list(interval=weekends_data$interval), FUN=mean)
#Adding columns names
colnames(steps_per_interval_weekdays) <- c("interval", "average_steps")
colnames(steps_per_interval_weekends) <- c("interval", "average_steps")
#Adding a column to indecate the day
steps_per_interval_weekdays$day <- "Weekday"
steps_per_interval_weekends$day <- "Weekend"
#Merging the two togather
week_data <- rbind(steps_per_interval_weekends, steps_per_interval_weekdays)
#Converting the day variabke to a factor
week_data$day <- as.factor(week_data$day)
#Making the plot
library(lattice)
xyplot(average_steps ~  interval | day, data = week_data, layout = c(1,2), type ="l", ylab="Number of Steps")
#The plot shows that that activity on the weekends tends to be more spread out over the day compared to the weekdays.
rm(list=ls())
##Code for reading in the dataset and/or processing the data
#Set up working directory
setwd("D:/Downloads/Coursera/Reproducible Research/Course Project 1")
#URL to download the data zip file
fileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
#Download the zip file into workspace
download.file(fileUrl, destfile="activity.zip")
#Unzip the file, read the file using read.csv() to load the data into R
data <- read.csv(unz("activity.zip", "activity.csv"), header = TRUE, sep = ",", na.strings = "NA")
#Look at the summary of the data
summary(data)
#Look at the struture of the data
str(data)
#Looking at the first 6 rows of the dataset:
head(data)
#CConverting the “date” variable to a Date classe and the “interval” variable to a factor
data$date <- as.Date(data$date, format = "%Y-%m-%d")
data$interval <- factor(data$interval)
##What is mean total number of steps taken per day?
#Subsetting the dataset to ignore missing values
NAnumbers <- is.na(as.character(data$steps))
datanoNA <- data[!NAnumbers,]
head(datanoNA)
#Aggregating the number of steps taken each day
#Creating a data frame with the steps taken for each day
stepseachday <- aggregate(steps ~ date, data = datanoNA, sum)
#Adding column names to the created data frame
colnames(stepseachday) <- c("date", "steps")
#Making a histogram of the total number of steps taken each day.
hist(as.numeric(stepseachday$steps), breaks = 20, col = "Blue", xlab = "Number of Steps", main= "Histogram of the total number of steps taken each day")
#Calculating the mean and median total number of steps taken per day.
mean(stepseachday$steps)
median(stepseachday$steps)
##What is the average daily activity pattern?
#Calculating the average number of steps taken, averaged across all days.
#Calculating the average
stepsperinterval <- aggregate(datanoNA$steps, by=list(interval=datanoNA$interval), FUN=mean)
#Adding columns names
colnames(stepsperinterval) <- c("interval", "averagesteps")
#ploting the average daily activity pattern
plot(as.integer(levels(stepsperinterval$interval)), stepsperinterval$averagesteps, type="l",xlab = "Interval", ylab = "Average Number of Steps", main = "Average Daily Activity Pattern",  col ="blue")
#The maximum number of average steps
maxsteps <- max(stepsperinterval$averagesteps)
maxsteps
#The 5-minute interval that contains the maximum number of steps
intervalemaxsteps<-stepsperinterval[which.max(stepsperinterval$averagesteps),]$interval
intervalemaxsteps
#The total number of missing values in the dataset (for each variable):
#For the “steps” variable:
sum(is.na(as.character(data$steps)))
#For the “date” variable:
sum(is.na(as.character(data$date)))
#For the “interval” variable:
sum(is.na(as.character(data$interval)))
#The strategy for filling in all of the missing values in the dataset. Missing values are replaced by the mean of that 5-minute interval.
#finding the indices of missing values (NAs)
NAnumbers <- which(is.na(as.character(data$steps)))
completedata <- data
#Imputing missing values using the mean for that 5-minute interval
completedata[NAnumbers, ]$steps<-unlist(lapply(NAnumbers, FUN=function(NAnumbers){
stepsperinterval[data[NAnumbers,]$interval==stepsperinterval$interval,]$averagesteps
}))
#Checking the complete data with the summary and str methods
summary(completedata)
str(completedata)
#Making a histogram of the total number of steps taken each day for the complete dataset.
#Creating a data frame with the steps taken for each day
stepseachdaycomplete <- aggregate(steps ~ date, data = completedata, sum)
#Adding column names to the created data frame
colnames(stepseachdaycomplete) <- c("date", "steps")
#Making the histogram
hist(as.numeric(stepseachdaycomplete$steps), breaks = 20, col = "red", xlab = "Number of Steps", main= "Histogram of the total number of steps taken each day")
#Calculating the mean and median total number of steps taken per day for the complete dataset.
mean(stepseachdaycomplete$steps)
median(stepseachdaycomplete$steps)
#Are there differences in activity patterns between weekdays and weekends?
#Creating a factor variable "day "to store the day of the week:
completedata$day <- as.factor(weekdays(completedata$date))
#Creating a logical variable "isweekday" (weekday=TRUE, weekend = FALE) :
completedata$isweekday <- ifelse(!(completedata$day %in% c("Saturday","Sunday")), TRUE, FALSE)
#Calculating the average number of steps for weekdays
weekdaysdata <- completedata[completedata$isweekday,]
stepsperintervalweekdays <- aggregate(weekdaysdata$steps, by=list(interval=weekdaysdata$interval), FUN=mean)
#Calculating the average number of steps for weekends
weekendsdata <- completedata[!completedata$isweekday,]
stepsperintervalweekends <- aggregate(weekendsdata$steps, by=list(interval=weekendsdata$interval), FUN=mean)
#Adding columns names
colnames(stepsperintervalweekdays) <- c("interval", "averagesteps")
colnames(stepsperintervalweekends) <- c("interval", "averagesteps")
#Adding a column to indecate the day
stepsperintervalweekdays$day <- "Weekday"
stepsperintervalweekends$day <- "Weekend"
#Merging the two togather
weekdata <- rbind(stepsperintervalweekends, stepsperintervalweekdays)
#Converting the day variabke to a factor
weekdata$day <- as.factor(weekdata$day)
#Making the plot
library(lattice)
xyplot(averagesteps ~  interval | day, data = weekdata, layout = c(1,2), type ="l", ylab="Number of Steps")
#The plot shows that that activity on the weekends tends to be more spread out over the day compared to the weekdays.
summary(data)
str(data)
head(data)
data$date <- as.Date(data$date, format = "%Y-%m-%d")
data$interval <- factor(data$interval)
NAnumbers <- is.na(as.character(data$steps))
datanoNA <- data[!NAnumbers,]
head(datanoNA)
stepseachday <- aggregate(steps ~ date, data = datanoNA, sum)
colnames(stepseachday) <- c("date", "steps")
hist(as.numeric(stepseachday$steps), breaks = 20, col = "Blue", xlab = "Number of Steps", main= "Histogram of the total number of steps taken each day")
mean(stepseachday$steps)
median(stepseachday$steps)
stepsperinterval <- aggregate(datanoNA$steps, by=list(interval=datanoNA$interval), FUN=mean)
colnames(stepsperinterval) <- c("interval", "averagesteps")
plot(as.integer(levels(stepsperinterval$interval)), stepsperinterval$averagesteps, type="l",xlab = "Interval", ylab = "Average Number of Steps", main = "Average Daily Activity Pattern",  col ="blue")
maxsteps <- max(stepsperinterval$averagesteps)
maxsteps
intervalemaxsteps<-stepsperinterval[which.max(stepsperinterval$averagesteps),]$interval
intervalemaxsteps
sum(is.na(as.character(data$steps)))
sum(is.na(as.character(data$date)))
sum(is.na(as.character(data$interval)))
NAnumbers <- which(is.na(as.character(data$steps)))
completedata <- data
completedata[NAnumbers, ]$steps<-unlist(lapply(NAnumbers, FUN=function(NAnumbers){
stepsperinterval[data[NAnumbers,]$interval==stepsperinterval$interval,]$averagesteps
}))
summary(completedata)
str(completedata)
stepseachdaycomplete <- aggregate(steps ~ date, data = completedata, sum)
colnames(stepseachdaycomplete) <- c("date", "steps")
hist(as.numeric(stepseachdaycomplete$steps), breaks = 20, col = "red", xlab = "Number of Steps", main= "Histogram of the total number of steps taken each day")
mean(stepseachdaycomplete$steps)
median(stepseachdaycomplete$steps)
completedata$day <- as.factor(weekdays(completedata$date))
completedata$isweekday <- ifelse(!(completedata$day %in% c("Saturday","Sunday")), TRUE, FALSE)
weekdaysdata <- completedata[completedata$isweekday,]
stepsperintervalweekdays <- aggregate(weekdaysdata$steps, by=list(interval=weekdaysdata$interval), FUN=mean)
weekendsdata <- completedata[!completedata$isweekday,]
stepsperintervalweekends <- aggregate(weekendsdata$steps, by=list(interval=weekendsdata$interval), FUN=mean)
colnames(stepsperintervalweekdays) <- c("interval", "averagesteps")
colnames(stepsperintervalweekends) <- c("interval", "averagesteps")
stepsperintervalweekdays$day <- "Weekday"
stepsperintervalweekends$day <- "Weekend"
weekdata <- rbind(stepsperintervalweekends, stepsperintervalweekdays)
weekdata$day <- as.factor(weekdata$day)
library(lattice)
xyplot(averagesteps ~  interval | day, data = weekdata, layout = c(1,2), type ="l", ylab="Number of Steps")
colnames(stepsperinterval) <- c("interval", "averagesteps")
colnames(stepsperinterval) <- c("interval", "averagesteps")
library(knitr)
